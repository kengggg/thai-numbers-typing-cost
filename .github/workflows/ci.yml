name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install tox tox-gh-actions

    - name: Run tests with tox
      run: tox
      env:
        PLATFORM: ${{ matrix.os }}

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox

    - name: Run linting
      run: tox -e lint

    - name: Run type checking
      run: tox -e type-check

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox

    - name: Run security checks
      run: tox -e security

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  validation:
    name: Validation Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Run validation tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:${PWD}/src"
        python -m pytest tests/validation/ -v --tb=short

    - name: Verify keyboard layout validation
      run: |
        export PYTHONPATH="${PYTHONPATH}:${PWD}/src"
        python -m pytest tests/validation/test_keyboard_validation.py -v

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Run integration tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:${PWD}/src"
        python -m pytest tests/integration/ -v --tb=short

    - name: Test CLI functionality
      run: |
        export PYTHONPATH="${PYTHONPATH}:${PWD}/src"
        cd src
        # Test basic CLI functionality
        python main.py ../data/thai-con.txt --text-only --output ../output/test
        python main.py ../data/thai-con.txt --list-typists
        # Test JSON-first workflow
        python main.py ../data/thai-con.txt --output-json ../output/test_cli.json
        python main.py --render-from-json ../output/test_cli.json --format console

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox

    - name: Run performance tests
      run: tox -e performance

    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-reports
        path: benchmark-report.json

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox

    - name: Check README and documentation
      run: |
        # Check if README exists and is not empty
        if [ ! -s README.md ]; then
          echo "README.md is missing or empty"
          exit 1
        fi
        
        # Check if CLAUDE.md exists (project documentation)
        if [ ! -s CLAUDE.md ]; then
          echo "CLAUDE.md is missing or empty"
          exit 1
        fi
        
        # Verify PRD.txt exists
        if [ ! -s PRD.txt ]; then
          echo "PRD.txt is missing or empty"
          exit 1
        fi