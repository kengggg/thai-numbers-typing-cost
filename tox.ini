[tox]
envlist = py38, py39, py310, py311, py312, lint, type-check, docs
isolated_build = true
skip_missing_interpreters = true

[testenv]
# Base test environment configuration
deps =
    -r{toxinidir}/requirements-test.txt
commands =
    pytest {posargs}
setenv =
    PYTHONPATH = {toxinidir}/src
    COVERAGE_FILE = {envtmpdir}/.coverage

[testenv:py{38,39,310,311,312}]
# Python version-specific test environments
description = Run tests with Python {basepython}
commands =
    pytest --cov=src --cov-report=term-missing --cov-report=xml --cov-fail-under=90 {posargs}

[testenv:lint]
# Code linting and formatting checks
description = Run linting tools
deps =
    flake8>=6.0.0
    black>=23.0.0
    isort>=5.12.0
    pylint>=2.17.0
commands =
    flake8 src/ tests/
    black --check --diff src/ tests/
    isort --check-only --diff src/ tests/
    pylint src/ --rcfile=.pylintrc

[testenv:type-check]
# Type checking with mypy
description = Run type checking
deps =
    mypy>=1.3.0
    types-setuptools
commands =
    mypy src/ --ignore-missing-imports --disallow-untyped-defs

[testenv:format]
# Code formatting (use this to fix formatting issues)
description = Format code with black and isort
deps =
    black>=23.0.0
    isort>=5.12.0
commands =
    black src/ tests/
    isort src/ tests/

[testenv:docs]
# Documentation testing and building
description = Test documentation and build docs
deps =
    sphinx>=6.0.0
    sphinx-rtd-theme
    myst-parser
changedir = docs
commands =
    sphinx-build -b html . _build/html

[testenv:security]
# Security scanning
description = Run security checks
deps =
    bandit>=1.7.0
    safety>=2.3.0
commands =
    bandit -r src/ -f json -o bandit-report.json
    safety check --json --output safety-report.json

[testenv:performance]
# Performance testing
description = Run performance tests
deps =
    -r{toxinidir}/requirements-test.txt
    pytest-benchmark>=4.0.0
    memory-profiler>=0.60.0
commands =
    pytest -m "not slow" --benchmark-only --benchmark-json=benchmark-report.json {posargs}

[testenv:coverage]
# Coverage reporting
description = Generate coverage reports
deps =
    -r{toxinidir}/requirements-test.txt
    coverage[toml]>=7.0.0
commands =
    coverage run -m pytest
    coverage report --show-missing
    coverage html
    coverage xml

[testenv:integration]
# Integration tests only
description = Run integration tests
commands =
    pytest tests/integration/ -v {posargs}

[testenv:unit]
# Unit tests only
description = Run unit tests
commands =
    pytest tests/unit/ -v {posargs}

[testenv:validation]
# Validation tests only
description = Run validation tests
commands =
    pytest tests/validation/ -v {posargs}

[testenv:clean]
# Clean up generated files
description = Clean up build artifacts and cache files
deps =
allowlist_externals = 
    find
    rm
    bash
commands =
    find . -type f -name "*.pyc" -delete
    find . -type f -name "*.pyo" -delete
    find . -type d -name "__pycache__" -exec rm -rf {} +
    find . -type d -name "*.egg-info" -exec rm -rf {} +
    rm -rf .coverage
    rm -rf htmlcov/
    rm -rf .pytest_cache/
    rm -rf .tox/
    rm -rf build/
    rm -rf dist/

# Flake8 configuration
[flake8]
max-line-length = 120
# Ignored error codes:
# E203: whitespace before ':'
# E501: line too long (handled by black)
# W503: line break before binary operator
extend-ignore = 
    E203,
    E501,
    W503
exclude = 
    .git,
    __pycache__,
    .tox,
    .venv,
    venv,
    build,
    dist,
    *.egg-info

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__init__.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\(Protocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

# Configure tox-gh-actions for GitHub Actions integration
[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312